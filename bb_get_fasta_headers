#!/bin/bash
# @file bb_get_fasta_headers 
# @brief Extracts headers from a single/multiple fasta file.
# @description 
#	Outputs a list of all fasta headers without the ">"in a fasta file.
#	It can be a single or multiple fasta file.
# @example 
#	bb_get_fasta_headers -i sequence.fasta 
# @arg $1 A valid fasta file.
# @exitcode 0 if succesful
# @exitcode 1 if unsuccesful
#
# Since sometimes remembering how exactly getopts work, this can be handy:
# https://www.tutorialspoint.com/unix_commands/getopt.htm
# getopt returns error code 0 for succesful parsing, 1 if getopt(3) returns errors, 
# 2 if it does not understand its own parameters, 3 if an internal error occurs like out-of-memory, 
# and 4 if it is called with -T.


# Source the whole BB native library.
source "$BIOBASH_NATIVE_LIB_PATH/bb_native.sh"

help="
	== BioBash get_fasta headers == 

	usage: bb_get_fasta_headers -i [fasta file]
	"

#--------------------------------------------------------------------------
#						Validate Input
#--------------------------------------------------------------------------
# Thanks to @barmar in Stackoverflow. 
# All explanation for this section can be found here:
# https://github.com/ampinzonv/biobash2/wiki/Blog::File-Descriptors
# https://github.com/ampinzonv/biobash2/wiki/Blog::BB-input-behavior

#IS_INPUT_COMING
if [[ $# -eq 0 && -t 0 ]]; then
    feedback::say "Not data stream nor input file provided" "error"
	echo "$help"
	exit 1
fi

# If we reached this point it means that data comes wether as positional parameter
# or as data stream via pipe. First check for parameters.
while getopts i: option; do
	case "${option}" in
		i)
			fastaFile="$OPTARG";;
					
		\?)
			feedback::sayfrom "Unknown parameter option." "error"
			echo "${help}"
			exit;;
	esac
done


#Code above checks if -i is set, if set checks that is not empty. Also checks if
# any non valid parameter has also been set. If any of those fail script stops.
# So the only extra thing to check is if file exists (0:true 1:false). 
# If file does not exists quit. If you provide an "-i" it requires a file.
fileExists=$(file::file_exists $fastaFile)
if [[ $fileExists -eq 1 ]];then
	feedback::sayfrom "Unable to find file: ${fastaFile}." "error"
	echo "$help"
	exit 1
else

	# To this point it means that the "-i" option was not used but still there is input...
	# for sure it has to come from STDOUT
	data=$(cat -- "$@")
	#Create a tmp file
	fastaFile=$(file::make_temp_file)
		
	echo "$data" > $fastaFile
	cat $fastaFile
fi


# Wether from parameter or stream, at this point we have a fasta file.
# Let's check if it is a valid one.

isFasta=$(file::is_fasta $fastaFile) 
if [[ $isFasta == "0" ]];then

	grep "^>" "$fastaFile"  | sed -e "s/>//"

else
	feedback::sayfrom "Provided $fastaFile file, is not a valid Fasta file." "error"
	exit 1
fi

exit 0	