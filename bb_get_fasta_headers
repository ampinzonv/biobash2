#!/bin/bash
# @file bb_get_fasta_headers 
# @brief Extracts headers from a single/multiple fasta file.
# @description 
#	Outputs a list of all fasta headers without the ">"in a fasta file.
#	It can be a single or multiple fasta file.
# @example 
#	bb_get_fasta_headers -i sequence.fasta 
# @arg $1 A valid fasta file.
# @exitcode 0 if succesful
# @exitcode 1 if unsuccesful
#
# Since sometimes remembering how exactly getopts work, this can be handy:
# https://www.tutorialspoint.com/unix_commands/getopt.htm
# getopt returns error code 0 for succesful parsing, 1 if getopt(3) returns errors, 
# 2 if it does not understand its own parameters, 3 if an internal error occurs like out-of-memory, 
# and 4 if it is called with -T.



source $BIOBASH_NATIVE_LIB_PATH/file.sh
source $BIOBASH_NATIVE_LIB_PATH/check.sh
source $BIOBASH_NATIVE_LIB_PATH/feedback.sh

help="
	Usage:
	bb_get_fasta_headers -i [fasta file]
	"

# Thanks to @barmar in Stackoverflow. 
# Here we coud check both that $@ AND STDIN are empty. But in principle we do not need to
# check for $# since we are not expecting positional parameters in BIOBASH and
# we will check it with OPTARGS.  So something like:
#            if [[ $# -eq 0  && -t 0 ]]; then
# would be useless and buggy.
# Let's check just for STDIN
if [[ -t 0 ]]; then
    feedback::say "No data stream was provided" "error"
	
else
	# If we reached this point it means that data should come as a file.
	#The best way to check if is a file is checking for the "-i" option.
	while getopts i: option; do
		case "${option}" in
			i)
				fastaFile="$OPTARG";;
					
			\?)
				feedback::sayfrom "Unknown option." "error"
				exit;;
		esac
	done
fi
echo "$fastaFile"
exit

# If we reached this point it means that "-i" is valid

data=$(cat -- "$@")
#is file?
file::file_exists $data

echo "$data"


exit

#--------------------------------------------------------------------------
#						Validate Input
#--------------------------------------------------------------------------
if  [[ -z "$fastaFile" ]]; then
	feedback::sayfrom "No fasta file provided" "error"
	echo "
	Usage:
	bb_get_fasta_headers -i [fasta file]
	"
	exit 1
fi

isFasta=$(file::is_fasta $fastaFile) 
if [[ $isFasta == "0" ]];then

	grep "^>" "$fastaFile"  | sed -e "s/>//"

else
	feedback::sayfrom "Provided $fastaFile file, is not a valid Fasta file." "error"
	exit 1
fi

exit 0	