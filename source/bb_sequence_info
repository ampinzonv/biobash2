#!/usr/bin/env bash
# @file bb_fasta_info
# @brief Displays general information from a FASTA (Nucleotide) or FASTQ file.
# @description 
#	This function displays statistics from a fasta/fastq  files holding nucleotide  information.
# @example 
#	bb_seq_info -i [FILE] -p [INT]
# @arg -i FASTA/FASTQ file.
# @arg -p  Processors (optional): Number of processor (cpu cores) to use.

# Only source libraries needed.
source "$BIOBASH_NATIVE_LIB_PATH/io.sh"; 
source "$BIOBASH_NATIVE_LIB_PATH/file.sh";
source "$BIOBASH_NATIVE_LIB_PATH/feedback.sh";
source "$BIOBASH_NATIVE_LIB_PATH/string.sh";
source "$BIOBASH_NATIVE_LIB_PATH/array.sh";

hasArgs=$(io::script_has_args "$#")
isPipe=$(io::input_is_pipe)

# If there are no arguments and not data stream.
if [[ $hasArgs = 1 && $isPipe = 1 ]]; then

	helpUsage="bb_fasta_info -i [file] -p [Number]
	Where [file] is  FASTA/FASTQ file. 
       Processors (-p) Number of processor (cpu cores) to use."
       

	helpDesc="Displays general information from a FASTA (Nucleotide) or FASTQ file."

	# DO NOT FORGET to quote the variables.
	feedback::help  "$helpDesc" "$helpUsage"
	exit 0
fi


#Define a default value for CPU cores to use.
cores=1

if [[ $hasArgs = 0 && $isPipe = 1 ]]; then
	while getopts i:p: option; 
	do
		case "${option}" in

			i) 
                inputFile="$OPTARG";;
            p) 
                cores="$OPTARG";;

			\?)
				feedback::sayfrom "Unknown parameter option." "error"
				exit;;
		esac
	done
fi

				

#######################################################
# DEALING WITH DATA STREAM STDIN == STDOUT (terminal)
#
# Since we have mandatory arguments this is necessary, hwe are here because data
# comes from a pipe and it should have arguments.
#######################################################

if [[ $isPipe = 0 ]]; then


	# It is key to capture the data stream using $(cat -) and not: $(cat -- "$@")
    # The latter cuases a lot of problems during pipes with arguments such as:
    # cat "hola" | bb_get_list -f
    #check: https://stackoverflow.com/questions/2746553/read-values-into-a-shell-variable-from-a-pipe
    # 
    data=$(cat -)
	inputFile=$(file::make_temp_file)
	
    # write to file	
	echo "$data" > $inputFile
	
	#Used to clean up environment
	eraseFile=0

	#This is  hack used to clean the environment. The only reason we will erase user data
	# is because we created, as this temporary file.  This flag will let us know that
	# we can safely erase this file.
	eraseFile=0


    while getopts p: option; 
    do
        case "${option}" in
                
        p)
            cores="$OPTARG";;
                    
        \?)
            feedback::sayfrom "Unknown parameter option." "error"
            echo "${help}"
            exit;;
        esac
    done 
fi





#####################################################################
# To this point we have a file.
#####################################################################

# ------ Check if file exists -------
fileExists=$(file::file_exists $inputFile)
if [[ $fileExists -eq 1 ]];then
	feedback::sayfrom "Unable to find file: ${inputFile}." "error"
	exit 1
fi

# ------ Check if it is a valid fasta file -------
isFasta=$(file::is_fasta $inputFile) 
if [[ $isFasta == "0" ]]; then
	true
fi

#####################################################################
#                       SCRIPT'S CORE
#####################################################################

$BIOBASH_BIN_OS/seqkit stats -a $inputFile -j $cores| cut -f 2,3,4,5,6,7,8,9,10,11,12,13,14,15 -w


##################
# Clening up
##################
if [ "$eraseFile" == 0 ];then
	rm $inputFile
fi
if [ "$eraseOutFile" == 0 ];then
	rm $outFile
fi

exit 0